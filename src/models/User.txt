First Draft of User class
(Step 2 - Refactor functionality with composition to
include references to class functions)

import axios, { AxiosResponse, AxiosError } from "axios";

interface UserProps {
  id?: number;
  name?: string;
  age?: number
}

type Callback = () => void

export class User {
  events: {
    [key: string]: Callback[]
  } = {}

  constructor(private data: UserProps) { }

  get(propName: string): (string | number) {
    return this.data[propName]
  }

  set(update: UserProps): void {
    Object.assign(this.data, update)
  }

  //EVENT SUBSCRIBER - ADD CALLBACKS TO ARRAY FOR EACH ACTION/EVENT
  on(eventName: string, callback: Callback): void {
    const handlers = this.events[eventName] || []
    handlers.push(callback)
    this.events[eventName] = handlers
  }

  //INVOKE ALL CALLBACKS FOR EACH ACTION/EVENT
  trigger(eventName: string): void {
    const handlers = this.events[eventName]
    if (!handlers || handlers.length === 0) {
      return
    }
    handlers.forEach(callBack => {
      callBack()
    })
  }

  fetch(): void {
    axios.get(`http://localhost:3000/users/${this.get('id')}`)
      .then((response: AxiosResponse): void => {
        this.set(response.data)
        console.log('data received successfully by client')
      })
      .catch((error: AxiosError): void => {
        console.log('post error: ', error)
      })
  }

  //MY CODE
  save(): void {
    const id = this.get('id');
    if (id) {
      axios.put(`http://localhost:3000/users/${id}`, this.data)
        .then((response: AxiosResponse): void => {
          console.log('put response: ', response)
        }).catch((error: AxiosError): void => {
          console.log('put error: ', error)
        })
    } else {
      axios.post(`http://localhost:3000/users`, this.data)
        .then((response: AxiosResponse): void => {
          console.log('post response: ', response)
        }).catch((error: AxiosError): void => {
          console.log('post error: ', error)
        })
    }
  }
}